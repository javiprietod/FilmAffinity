openapi: 3.0.0
info:
  title: Example API
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/JAVIPRIETOD_1/FilmAff/1.0.0
  - url: https://filmaff.onrender.com/api/
    description: Development server
paths:
  /users/:
    get:
      summary: List users
      operationId: listUsers
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      summary: Create a user
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Email already exists'
        '400':
          description: Invalid password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid password'
  /users/login/:
    post:
      summary: User login
      operationId: loginUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '201':
          description: Login successful, session cookie set
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'session=abc123; Path=/; Secure; HttpOnly'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid credentials'
  /users/me/:
    get:
      summary: Retrieve current user's profile
      operationId: getCurrentUser
      tags:
        - Users
      responses:
        '200':
          description: Current user profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: No session cookie found or session is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'No session cookie found'
    patch:
      summary: Update current user's profile
      operationId: updateCurrentUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResponse'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid data provided'
        '404':
          description: No session cookie found or session is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'No user found with the provided session token'
    delete:
      summary: Delete current user's profile
      operationId: deleteCurrentUser
      tags:
        - Users
      responses:
        '204':
          description: User profile deleted successfully
        '404':
          description: No session cookie found or session is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'No session cookie found'
  /users/logout/:
    delete:
      summary: Log out the current user
      operationId: logoutUser
      tags:
        - Users
      responses:
        '204':
          description: User logged out successfully
          headers:
            Set-Cookie:
              description: Deletes the session cookie
              schema:
                type: string
                example: 'session=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT'
        '405':
          description: No session found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'No session cookie found'
  /movies/:
    get:
      summary: List all movies or search by title
      operationId: listMovies
      tags:
        - Movies
      parameters:
        - in: query
          name: title
          schema:
            type: string
            example: Movie Title
          description: Optional title to filter the list of movies
        - in: query
          name: director
          schema:
            type: string
            example: Alvaro Ruiz
          description: Optional director to filter the list of movies
        - in: query
          name: genre
          schema:
            type: string
            example: Drama
          description: Optional genre to filter the list of movies
        - in: query
          name: year
          schema:
            type: integer
            example: 1970
          description: Optional year to filter the list of movies
        - in: query
          name: rating
          schema:
            type: integer
            example: 5
          description: Optional rating to filter the list of movies
        - in: query
          name: limit
          schema:
            type: integer
            default: 9
          description: Limit the number of movies returned
        - in: query
          name: skip
          schema:
            type: integer
            default: 0
          description: Number of movies to skip before starting to return results
      responses:
        '200':
          description: An array of movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
    post:
      summary: Create a new movie
      operationId: createMovie
      tags:
        - Movies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '201':
          description: New movie created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid data provided'
  /movies/{id}/:
    get:
      summary: Retrieve a specific movie
      operationId: getMovie
      tags:
        - Movies
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: Unique identifier of the movie
      responses:
        '200':
          description: Detailed information about a movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'No movie found with the provided id'
    put:
      summary: Update a movie
      operationId: updateMovie
      tags:
        - Movies
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid data provided'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'No movie found with the provided id'
    delete:
      summary: Delete a movie
      operationId: deleteMovie
      tags:
        - Movies
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Movie deleted successfully
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'No movie found with the provided id'
  /movies/bulk/:
    post:
      summary: Bulk create movies
      operationId: bulkCreateMovies
      tags:
        - Movies
      requestBody:
        required: true
        description: Array of movies to be created
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Movie'
      responses:
        '201':
          description: Bulk movie creation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Request body must be a list'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'HTTP method not allowed'
components:
  schemas:
    User:
      type: object
      properties:
        nombre:
          type: string
          example: Name
        tel:
          type: integer
          example: 123456789
        email:
          type: string
          example: example@gmail.com
        password:
          type: string
          example: Password123
    UserResponse:
      type: object
      properties:
        nombre:
          type: string
          example: Name
        tel:
          type: integer
          example: 123456789
        email:
          type: string
          example: example@gmail.com
    Login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Movie:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Movie Title
        year:
          type: integer
          example: 1970
        duration:
          type: integer
          example: 120
        rating:
          type: integer
          example: 5
        genre:
          type: string
          example: Drama
        summary:
          type: string
          example: The amazing movie about the api movie creation
        director: 
          type: string
          example: Alvaro Ruiz
        thumbnail:
          type: string
          example: link.url